{"version":3,"sources":["js/sudoku-grid-util.js","js/sudoku-generator.js","js/sudoku-grid-builder.js","js/sudoku-grid.js","js/sudoku.js","js/sudoku-ui.js"],"names":["rows","Set","cols","lowerCaseRows","getRows","getLowerCaseRows","getCols","getSquares","cross","getUnitList","map","c","concat","r","u","forEach","push","getUnits","squares","unitlist","units","Map","s","set","filter","has","getPeers","peers","p","get","x","a","b","values","a1","b1","add","some","seq","func","d","result","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","all","getRandomInt","min","max","level","easy","medium","hard","master","digits","parseGrid","grid","gridValues","entries","assign","chars","i","others","d2","eliminate","size","s2","unit","dplaces","solve","search","sort","s1","solved","unitSolved","diff","randomPuzzle","n","randomValue","ds","isUnique","original","test","createPuzzle","solution","puzzle","indices","shuffled","j","v","getGame","difficulty","squareClass","contentClass","createRow","cellSize","row","document","createElement","setAttribute","style","height","createSquare","square","width","maxWidth","flex","createSquareContent","id","content","toLowerCase","d1","build","element","getElementById","offsetWidth","appendChild","peerIds","SudokuGrid","clues","clue","innerHTML","classList","value","highlightedSquare","toUpperCase","contains","remove","highlightedPeers","Sudoku","game","generator","fillClues","setKeyInputEvents","setBtnInputEvents","onclick","reset","erase","setSquareValue","querySelectorAll","displayMessage","el","highlightSquare","highlightPeers","onkeydown","e","key","keycode","keyCode","window","alert"],"mappings":"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","file":"sudoku-ui.d7425466.js","sourceRoot":"../src","sourcesContent":["const rows = new Set(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']);\nconst cols = new Set(['1', '2', '3', '4', '5', '6', '7', '8', '9']);\nconst lowerCaseRows = new Set(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']);\n\nexport function getRows() {\n  return rows;\n}\n\nexport function getLowerCaseRows() {\n  return lowerCaseRows;\n}\n\nexport function getCols() {\n  return cols\n}\n\nexport function getSquares() {\n  return cross(rows, cols);\n}\n\nexport function getUnitList() {\n  return [...cols].map(c => cross(rows, new Set(c)))\n      .concat([...rows].map(r => cross(new Set(r), cols)))\n      .concat((() => {\n        let u = [];\n        [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']].forEach(r => {\n          [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].forEach(c => {\n            u.push(cross(new Set(r), new Set(c)))\n          })\n        });\n\n        return u;\n      })());\n}\n\nexport function getUnits(squares, unitlist) {\n  let units = new Map();\n  [...squares].forEach(s => units.set(s, unitlist.filter(u => u.has(s))));\n\n  return units;\n}\n\nexport function getPeers(squares, units) {\n  let peers = new Map();\n\n  [...squares].forEach(s => {\n    let p = units.get(s);\n    peers.set(s, new Set(\n        [...new Set([...p[0], ...p[1], ...p[2]])].filter(x => x !== s)));\n  });\n\n  return peers;\n}\n\nexport function cross(a, b) {\n  let c = new Set();\n\n  for (let a1 of a.values()) {\n    for (let b1 of b.values() || b) {\n      c.add(a1 + b1);\n    }\n  }\n\n  return c;\n}\n\nexport function some(seq, func) {\n  for (let d of seq) {\n    let result = func(d);\n    if (result) return result;\n  }\n\n  return false;\n}\n\n/**\n * Fisher-Yates Shuffle\n * See http://bit.ly/2gMXijX\n */\nexport function shuffle(seq) {\n  let array = [...seq];\n  let currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport function all(values) {\n  for (let v of values)\n    if (!v) return false;\n\n  return true;\n}\n\nexport function getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","/**\n * A JavaScript port based on \"Solving Every Sudoku Puzzle\"\n * by Peter Norvig.\n *\n * The article can be found here:\n * - http://norvig.com/sudoku.html\n *\n * The original Python source can be found here:\n * - https://github.com/norvig/pytudes/blob/master/sudoku.py\n */\n\nimport {\n  getCols,\n  getSquares,\n  getUnitList,\n  getUnits,\n  getPeers,\n  some,\n  shuffle,\n  all,\n  getRandomInt\n} from './sudoku-grid-util';\n\nconst level = {\n  easy: 28,\n  medium: 37,\n  hard: 45,\n  master: 65\n};\n\nconst digits = getCols();\nconst squares = getSquares();\nconst unitlist = getUnitList();\n\nlet units = getUnits(squares, unitlist);\nlet peers = getPeers(squares, units);\n\n/**\n * Convert grid to a dict of possible values, {square: digits},\n * or return false if a contradiction is detected.\n */\nfunction parseGrid(grid) {\n  let values = new Map();\n  squares.forEach(s => values.set(s, digits));\n\n  for (let [s, d] of gridValues(grid).entries()) {\n    if (digits.has(d) && !assign(values, s, d)) {\n      return false;\n    }\n  }\n\n  return values;\n}\n\n/**\n * Convert grid into a dict of {square: char} with '0' or '.' for empties.\n */\nfunction gridValues(grid) {\n  let chars = grid.filter(c => digits.has(c) || c === '0' || c === '.');\n  let values = new Map();\n  let s = [...squares];\n\n  for (let i = 0; i < s.length; i++) {\n    values.set(s[i], chars[i]);\n  }\n\n  return values;\n}\n\n/**\n * Eliminate all the other values (except d) from values[s] and propagate.\n * Return values, except return False if a contradiction is detected.\n */\nfunction assign(values, s, d) {\n  let others = [...values.get(s)].filter(x => x !== d);\n  return all(others.map(d2 => eliminate(values, s, d2))) ? values : false;\n}\n\n/**\n * Eliminate d from values[s]; propagate when values or places <= 2.\n * Return values, except return False if a contradiction is detected.\n */\nfunction eliminate(values, s, d) {\n  if (!values.get(s).has(d))\n    return values;\n\n  values.set(s, new Set([...values.get(s)].filter(x => x !== d)));\n\n  if (!values.get(s).size) {\n    return false;\n\n  } else if (values.get(s).size === 1) {\n    let d2 = [...values.get(s)][0];\n\n    if (!all([...peers.get(s)].map(s2 => eliminate(values, s2, d2))))\n      return false;\n  }\n\n  for (let unit of units.get(s)) {\n    let dplaces = [...unit].filter(s2 => values.get(s2).has(d));\n\n    if (!dplaces.length) {\n      return false;\n    } else if (dplaces.length === 1) {\n      if (!assign(values, dplaces[0], d))\n        return false;\n    }\n  }\n\n  return values;\n}\n\nfunction solve(grid) {\n  return search(parseGrid(grid));\n}\n\n/**\n * Using depth-first search and propagation, try all possible values.\n */\nfunction search(values) {\n  if (!values)\n    return false;\n\n  if (all([...squares].map(s => values.get(s).size === 1)))\n    return values;\n\n  let s = [...squares]\n      .filter(s => values.get(s).size > 1)\n      .sort((s1, s2) => values.get(s1).size - values.get(s2).size)[0];\n\n  return some(values.get(s), d => search(assign(new Map(values), s, d)));\n}\n\n/**\n * A puzzle is solved if each unit is a permutation of the digits 1 to 9.\n */\nfunction solved(values) {\n  function unitSolved(unit) {\n    for (let s of unit) {\n      let diff = [...values.get(s)].filter(d => !digits.has(d));\n      if (diff.length > 0) return false;\n    }\n\n    return true;\n  }\n\n  return values && all(unitlist.map(u => unitSolved(u)));\n}\n\n/**\n * Make a random puzzle with N or more assignments. Restart on contradictions.\n * Note the resulting puzzle is not guaranteed to be solvable, but empirically\n * about 99.8% of them are solvable. Some have multiple solutions\n */\nfunction randomPuzzle(n = 17) {\n  let values = new Map();\n  squares.forEach(s => values.set(s, digits));\n\n  for (let s of shuffle(squares)) {\n    if (!assign(values, s, randomValue(values.get(s)))) {\n      break;\n    }\n\n    let ds = [...squares]\n        .filter(s => values.get(s).size === 1)\n        .map(s => values.get(s));\n\n    if (ds.length >= n && new Set(ds).size >= 8) {\n      return [...squares]\n          .map(s => values.get(s).size === 1 ? [...values.get(s)][0] : '0');\n    }\n  }\n\n  return randomPuzzle(n);\n}\n\nfunction randomValue(values) {\n  return [...values][getRandomInt(0, values.size - 1)];\n}\n\nfunction isUnique(original, test) {\n  for (let [s, d] of original) {\n    if ([...test.get(s)][0] !== [...d][0]) return false;\n  }\n\n  return true;\n}\n\n/**\n * Iterate through the randomly shuffled squares.\n * After removing each square from the solution\n * solve it and test if it is the same as the original.\n * If the solution doesn't match undo the removal and\n * try another square.\n */\nfunction createPuzzle(solution) {\n  let puzzle = [];\n  let indices = {};\n  let shuffled = shuffle(squares);\n\n  [...squares].forEach((s, i) => {\n    puzzle.push([...solution.get(s)][0]);\n    indices[s] = i;\n  });\n\n  let result = new Map();\n\n  for (let i = 0; i < shuffled.length; i++) {\n    let j = indices[shuffled[i]];\n    let v = puzzle[j];\n    puzzle[j] = '0';\n\n    if (!isUnique(solution, solve(puzzle))) {\n      puzzle[j] = v;\n      result.set(shuffled[i], v);\n    } else {\n      result.set(shuffled[i], '0');\n    }\n  }\n\n  return result;\n}\n\nexport default {\n  getGame: (difficulty = level.easy) => {\n    let solution = solve(randomPuzzle(81 - difficulty));\n\n    while (!solved(solution)) {\n      solution = solve(randomPuzzle());\n    }\n\n    return {\n      puzzle: createPuzzle(solution),\n      solution: solution\n    };\n  }\n}\n","import {\n  getLowerCaseRows,\n  getCols,\n  getSquares,\n  getPeers, getUnits, getUnitList\n} from \"./sudoku-grid-util\";\n\nconst n = 9;\nconst squareClass = 'col-1 square';\nconst contentClass = 'square-content';\n\nlet createRow = (cellSize) => {\n  let row = document.createElement('div');\n  row.setAttribute('class', 'row');\n  row.style.height = `${cellSize}px`;\n\n  return row;\n};\n\nlet createSquare = (cellSize) => {\n  let square = document.createElement('div');\n  square.setAttribute('class', squareClass);\n\n  square.style.height = `${cellSize}px`;\n  square.style.width = `${cellSize}px`;\n  square.style.maxWidth = `${cellSize}px`;\n  square.style.flex = `0 0 ${cellSize}px`;\n\n  return square;\n};\n\nlet createSquareContent = (id) => {\n  let content = document.createElement('div');\n  content.id = id;\n  content.setAttribute('class', contentClass);\n\n  return content;\n};\n\nlet toLowerCase = (squares) => {\n  let result = new Map();\n  for (let [s, d] of squares) {\n    result.set(s.toLowerCase(), new Set([...d].map(d1 => d1.toLowerCase())));\n  }\n\n  return result;\n};\n\nexport function build(id='grid-container') {\n  let rows = [...getLowerCaseRows()];\n  let cols = [...getCols()];\n\n  let element = document.getElementById(id);\n  let squares = new Map();\n  let cellSize = element.offsetWidth ? (element.offsetWidth / n) - 3 : 50;\n\n  for (let i = 0; i < n; i++) {\n    let row = createRow(cellSize);\n\n    for (let j = 0; j < n; j++) {\n      let id = `${rows[i]}${cols[j]}`;\n      let square = createSquare(cellSize);\n      let content = createSquareContent(id);\n\n      square.appendChild(content);\n      row.appendChild(square);\n      squares.set(id, content);\n    }\n\n    element.appendChild(row);\n  }\n\n  let s = getSquares();\n  let u = getUnitList();\n  let peerIds = toLowerCase(getPeers(s, getUnits(s, u)));\n  let peers = new Map();\n\n  for (let [s, p] of peerIds) {\n    peers.set(s, [...p].map(x => squares.get(x)));\n  }\n\n  return {\n    peers: peers,\n    squares: squares\n  };\n}\n","import {build} from './sudoku-grid-builder';\n\nexport default class SudokuGrid {\n  constructor(id='grid-container') {\n    this.grid = build(id);\n    this.peers = this.grid.peers;\n    this.squares = this.grid.squares;\n  }\n\n  fillClues(clues) {\n    for (let [s, d] of clues) {\n      let clue = [...d][0];\n      let square = this.squares.get(s.toLowerCase());\n\n      if (clue === '0' || clue === '.') {\n        square.innerHTML = '';\n      } else {\n        square.classList.add('clue');\n        square.innerHTML = clue;\n      }\n    }\n  }\n\n  setSquareValue(value, puzzle) {\n    if (this.highlightedSquare) {\n      puzzle.set(this.highlightedSquare.id.toUpperCase(), new Set(value));\n      this.highlightedSquare.innerHTML = value;\n    }\n  }\n\n  highlightSquare(square) {\n    if (!square.classList.contains('clue')) {\n      if (this.highlightedSquare) {\n        this.highlightedSquare.classList.remove('focused-content');\n        this.highlightedSquare.classList.remove('highlight');\n      }\n\n      this.highlightedSquare = square;\n      this.highlightedSquare.classList.add('focused-content');\n    }\n  }\n\n  highlightPeers(square) {\n    if (!this.squares.get(square).classList.contains('clue')) {\n      if (this.highlightedPeers) {\n        this.highlightedPeers.forEach(p => {\n          if (p.id !== square) p.classList.remove('highlight');\n        });\n      }\n\n      this.highlightedPeers = this.peers.get(square);\n      this.highlightedPeers.forEach(p => p.classList.add('highlight'));\n    }\n  }\n}","import generator from './sudoku-generator';\nimport SudokuGrid from './sudoku-grid';\n\nexport default class Sudoku {\n  constructor() {\n    this.game = generator.getGame();\n    this.puzzle = this.game.puzzle;\n    this.original = new Map(this.puzzle);\n    this.solution = this.game.solution;\n\n    this.grid = new SudokuGrid();\n    this.grid.fillClues(this.puzzle);\n\n    this.setKeyInputEvents();\n    this.setBtnInputEvents();\n\n    document.getElementById('reset').onclick = () => this.reset();\n    document.getElementById('erase').onclick = () => this.erase();\n  }\n\n  reset() {\n    this.puzzle = new Map(this.original);\n    this.grid.fillClues(this.puzzle);\n  }\n\n  erase() {\n    this.grid.setSquareValue('', this.puzzle);\n  }\n\n  setBtnInputEvents() {\n    let grid = this.grid;\n    let buttons = document.querySelectorAll('.number-btn');\n\n    buttons.forEach(b => {\n      b.onclick = () => {\n        grid.setSquareValue(b.value, this.puzzle);\n        if (this.solved()) Sudoku.displayMessage();\n      }\n    });\n  }\n\n  setKeyInputEvents() {\n    let grid = this.grid;\n    let squares = this.grid.squares;\n\n    // Setup touch/click events for each square.\n    for (let [s, el] of squares) {\n      el.onclick = () => {\n        grid.highlightSquare(el);\n        grid.highlightPeers(s);\n      }\n    }\n\n    // Input event\n    document.onkeydown = (e) => {\n      let value = e.key;\n      let keycode = e.keyCode;\n\n      if (keycode >= 49 && keycode <= 57) {\n        grid.setSquareValue(value, this.puzzle);\n        if (this.solved()) Sudoku.displayMessage()\n\n      } else if (keycode === 8) {\n        grid.setSquareValue('', this.puzzle);\n      }\n    }\n  }\n\n  solved() {\n    for (let [s, d] of this.solution) {\n      if ([...this.puzzle.get(s)][0] !== [...d][0]) return false;\n    }\n\n    return true;\n  }\n\n  static displayMessage() {\n    window.alert(`Congratulations! You solved the puzzle.`)\n  }\n}","import '../css/main.css';\nimport Sudoku from \"./sudoku\";\n\nnew Sudoku();"]}